apply plugin: 'com.android.application'

android {
    compileSdkVersion 19
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.restfriedchicken.android"
        minSdkVersion 19
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/NOTICE'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:+'
    compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.2'
    compile project(':lib')

    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.3.1'

}

task extractApk(type: Copy) {
    def zipFile = file("${buildDir}/outputs/apk/app-debug.apk")
    def outputDir = file("${buildDir}/outputs/apk/under-config")

    from zipTree(zipFile)
    into outputDir
}

//should add failure check if config.properties not found
task configApk(type: Copy, dependsOn: extractApk) {
    outputs.upToDateWhen { false }

    def env = getEnv()

    def config = file("config/${env}/config.properties")
    def outputDir = file("${buildDir}/outputs/apk/under-config/assets/")

    from config
    into outputDir
}

task removeOldSign(type: Delete, dependsOn: configApk) {
    delete file("${buildDir}/outputs/apk/under-config/META-INF/")
}

task removeUnconfiguredApk(type: Delete, dependsOn: removeOldSign) {
    delete file("${buildDir}/outputs/apk/app-debug.apk")
}

task repackApk(type: Zip, dependsOn: removeUnconfiguredApk) {
    archiveName = "app-debug-unsigned.apk"
    destinationDir = file("${buildDir}/outputs/apk/")
    from file("${buildDir}/outputs/apk/under-config")
}

task resignApk(type: Exec, dependsOn: repackApk) {
    //workingDir "${projectDir}"
    executable "sh"
    args "-xe", "${projectDir}/scripts/resign_apk.sh", "${buildDir}/outputs/apk/app-debug-unsigned.apk"
}

task alignApk(type: Exec, dependsOn: resignApk) {
    executable "zipalign"
    args "-v", "4", "${buildDir}/outputs/apk/app-debug-unsigned.apk", "${buildDir}/outputs/apk/app-debug.apk"
}

task extractTestApk(type: Copy) {
    def zipFile = file("${buildDir}/outputs/apk/app-debug-androidTest-unaligned.apk")
    def outputDir = file("${buildDir}/outputs/apk/app-debug-androidTest-unaligned")

    from zipTree(zipFile)
    into outputDir
}

task removeOldSignFromTestApk(type: Delete, dependsOn: extractTestApk) {
    delete file("${buildDir}/outputs/apk/app-debug-androidTest-unaligned/META-INF/")
}

task removeTestApk(type: Delete, dependsOn: removeOldSignFromTestApk) {
    delete file("${buildDir}/outputs/apk/app-debug-androidTest-unaligned.apk")
}

task repackTestApk(type: Zip, dependsOn: removeTestApk) {
    archiveName = "app-debug-androidTest-unaligned.apk"
    destinationDir = file("${buildDir}/outputs/apk/")
    from file("${buildDir}/outputs/apk/app-debug-androidTest-unaligned")
}

task resignTestApk(type: Exec, dependsOn: repackTestApk) {
    executable "sh"
    args "-xe", "${projectDir}/scripts/resign_apk.sh", "${buildDir}/outputs/apk/app-debug-androidTest-unaligned.apk"
}

task configDeviceHosts(type: Exec) {
    def env = getEnv()

    executable "sh"
    args "-xe", "${projectDir}/scripts/config_device_hosts.sh", "${projectDir}/config/${env}/hosts"
}

gradle.projectsEvaluated {

    connectedAndroidTest.dependsOn(configDeviceHosts)

    def env = getEnv()
    if (!env.equals("dev")) {
        extractApk.dependsOn(assembleDebugAndroidTest)
        //app-debug.apk was replaced after assembling test

        extractTestApk.dependsOn(alignApk)
        //test apk should have the same signature as the target apk

        configDeviceHosts.dependsOn(resignTestApk)
    }

}

def getEnv() {
    def env = System.getenv('ENV')
    if (env != null && !env.equals("")) {
        return env
    } else {
        return "dev"
    }

}